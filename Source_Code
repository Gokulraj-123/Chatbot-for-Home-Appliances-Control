import speech_recognition as sr
import pyttsx3
import time as a
import requests as z
m=["turn on","turn off","music","increase brightness","decrease brightness"]
def speak(text):
    engine = pyttsx3.init()
    engine.setProperty('rate',150)
    engine.setProperty('voices','f3')
    engine.say(text)
    engine.runAndWait()
def control1():
    a.sleep(6)
    speak('commands avaiable')
    speak('TURN ON   ... TURN OFF... INCREASE BRIGHTNESS....DECREASE BRIGHTNESS......MUSIC SYNC MODE....say exit to leave ')
    r = sr.Recognizer()
    with sr.Microphone() as source:
        r.adjust_for_ambient_noise(source)
        r.pause_threshold = 1
        speak('GIVE the INPUT NOW...')
        audio = r.listen(source,timeout=10)
        try:
            co = r.recognize_google(audio).lower()
            if "turn on" in co:
                speak('turning on')
                a.sleep(0.5)
                z.post("https://maker.ifttt.com/trigger/turn_on/with/key/iLPu36H-9qRxxC5R2rEzZAysSvGv7Gsq71JhIPlmnUh")
                control1()
            elif "turn off" in co:
                speak('turning off')
                a.sleep(0.5)
                z.post("https://maker.ifttt.com/trigger/turn_off/with/key/iLPu36H-9qRxxC5R2rEzZAysSvGv7Gsq71JhIPlmnUh")
                control1()
            elif "decrease" in co or "decrease brightness" in co:
                speak('decreasing the brightness')
                a.sleep(0.5)
                z.post("https://maker.ifttt.com/trigger/decrease/with/key/jsee2xUwXWO2M4NVu_CYdpI0kAsAH-98fr_oAvfWFpw")
                control1()
            elif "increase" in co or "increase brightness" in co:
                speak('increase the brightness')
                a.sleep(0.5)
                z.post("https://maker.ifttt.com/trigger/increase/with/key/jsee2xUwXWO2M4NVu_CYdpI0kAsAH-98fr_oAvfWFpw")
                control1()
            elif "music" in co or "music mode" in co:
                speak('music mode enabled')
                a.sleep(0.5)
                z.post("https://maker.ifttt.com/trigger/music/with/key/bCgXIPvEFeDzUkT-DfkCot1oIKk2ITUgwgKFSWta5nZ")
                control1()
            elif "exit" in co:
                main()
            else:
                speak('invalid command')
                control1()
        except sr.UnknownValueError:
            speak("Sorry, I didn't understand that.")
            return control1()
        except sr.RequestError:
            speak("Sorry, my speech service is down.")
            return control1()  
def control():
    speak("to control the device please connect the device to smart life app")
    r = sr.Recognizer()
    with sr.Microphone() as source:
        r.adjust_for_ambient_noise(source)
        r.pause_threshold = 1
        speak('IS THE DEVICE PAIRED.....??')
        audio = r.listen(source,timeout=10)
    try:
        command = r.recognize_google(audio).lower()
        if "yes" in command:
            speak('u can control the smart device with following command...')
            a.sleep(0.5)
            speak('TURN ON   ... TURN OFF... INCREASE BRIGHTNESS....DECREASE BRIGHTNESS......MUSIC SYNC MODE....say exit to leave ')
            r = sr.Recognizer()
            with sr.Microphone() as source:
                r.adjust_for_ambient_noise(source)
                r.pause_threshold = 1
                speak('GIVE the INPUT NOW...')
                audio = r.listen(source,timeout=10)
            try:
                co = r.recognize_google(audio).lower()
                if "turn on" in co:
                    speak('turning on')
                    a.sleep(0.5)
                    z.post("https://maker.ifttt.com/trigger/turn_on/with/key/iLPu36H-9qRxxC5R2rEzZAysSvGv7Gsq71JhIPlmnUh")
                    control1()
                elif "turn off" in co:
                    speak('turning off')
                    a.sleep(0.5)
                    z.post("https://maker.ifttt.com/trigger/turn_off/with/key/iLPu36H-9qRxxC5R2rEzZAysSvGv7Gsq71JhIPlmnUh")
                    control1()
                elif "decrease" in co or "decrease brightness" in co:
                    speak('decreasing the brightness')
                    a.sleep(0.5)
                    z.post("https://maker.ifttt.com/trigger/decrease/with/key/jsee2xUwXWO2M4NVu_CYdpI0kAsAH-98fr_oAvfWFpw")
                    control1()
                elif "increase" in co or "increase brightness" in co:
                    speak('increase the brightness')
                    a.sleep(0.5)
                    z.post("https://maker.ifttt.com/trigger/increase/with/key/jsee2xUwXWO2M4NVu_CYdpI0kAsAH-98fr_oAvfWFpw")
                    control1()
                elif "music" in co or "music mode" in co:
                    speak('music mode enabled')
                    a.sleep(0.5)
                    z.post("https://maker.ifttt.com/trigger/music/with/key/bCgXIPvEFeDzUkT-DfkCot1oIKk2ITUgwgKFSWta5nZ")
                    control1()
                    a.sleep(10)
                else:
                    speak('invalid command')
                    control1()
            except sr.UnknownValueError:
                speak("Sorry, I didn't understand that.")
                return control()
            except sr.RequestError:
                speak("Sorry, my speech service is down.")
                return control()
    except sr.UnknownValueError:
        speak("Sorry, I didn't understand that.")
        return control()
    except sr.RequestError:
        speak("Sorry, my speech service is down.")
        return control()            
def smart():
    speak("smart mode enabled.....")
    a.sleep(0.5)
    speak("this mode helps to connect the smart devices and controls it")
    control()
    
def main():
    
    speak("hello i am mini alexa")
    speak("this product is purely based on chat bot and used to control home applicanes")
    speak("TO ENTER CHATBOT MODE SAY CHAT BOT ....TO ENTER SMART LIFE MODE SAY SMART MODE ...TO PLAY A SONG SAY SONG MODE")
    r = sr.Recognizer()
    with sr.Microphone() as source:
        r.adjust_for_ambient_noise(source)
        r.pause_threshold = 1
        speak('GIVE the INPUT NOW...')
        audio = r.listen(source,timeout=10)
    try:
        command = r.recognize_google(audio).lower()
        if "chatbot moode" in command or "chatbot" in command:
            #chatbot()
            pass
        elif "smart" in command or "smart mode" in command:
            smart()
        elif "song moode" in command or "song" in command:
            #song()
            pass
        else:
            speak("sorry i cant understand......try again")
            main()
    except sr.UnknownValueError:
        speak("Sorry, I didn't understand that.")
        return main()
    except sr.RequestError:
        speak("Sorry, my speech service is down.")
        return main()
if __name__=="__main__":
    main()
